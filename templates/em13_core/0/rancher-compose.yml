version: "2"
.catalog:
  name: "EM13"
  description: "Email Marketing and Auto-responder platform. [django-em13](https://gitlab.com/em13/django-em13) all set up and ready to go in Rancher."
  version: 1
  uuid: em13-0
  questions:
    - variable: UWSGI_IMAGE
      label: Image used for UWSGI container e.g. mukomalison/em13_uwsgi:latest
      required: true
      default: ""
      type: "string"
    - variable: MARIADB_DATABASE
      label: MARIADB db to create.
      required: true
      default: em13
      type: "string"
    - variable: MARIADB_USER
      label: MARIADB superuser account to create.
      required: true
      default: docker
      type: "string"
    - variable: MARIADB_ROOT_PASSWORD
      label: MARIADB root password.
      required: true
      default: docker_C0nt41n3r!
      type: "string"
    - variable: MARIADB_PASSWORD
      label: MARIADB password to create.
      required: true
      default: docker
      type: "string"
    - variable: DB_SERVER
      label: DB Backup - database server.
      required: true
      default: db
      type: "string"
    - variable: DB_NAME
      label: DB Backup - database name.
      required: true
      default: em13
      type: "string"
    - variable: DB_USER
      label: DB Backup - database user.
      required: true
      default: docker
      type: "string"
    - variable: DB_PASS
      label: DB Backup - Database password.
      required: true
      default: docker
      type: "string"
    - variable: ADMIN_EMAIL
      label: "Administrator email"
      description: "Primary contact email for the site e.g. 'admin@em13.com'."
      required: true
      default: ""
      type: "string"
    - variable: SITE_URL
      label: "Site URL"
      description: "Primary URL for the site e.g. 'em13.com' (do not include http:// and doesn't end with /). Also do not use quotes."
      required: true
      default: ""
      type: "string"
    - variable: WEBSERVER_PORT
      description: "Website port"
      label: "Port on which the site should be served. Typically 80"
      required: true
      default: 80
      type: "int"
    - variable: DJANGO_ALLOWED_HOSTS
      label: "Django allowed hosts"
      description: "Comma separated, quoted list of hosts that django will allow e.g. 'em13.com','dev.em13.com'. The SITE_URL will automatically be added to the allowed hosts list so you can leave this blank if needed."
      required: false
      default: ""
      type: "string"
    - variable: SERVER_NAME
      label: "Server name"
      description: "Domain name of the server e.g. 'dev.em13.com'."
      required: true
      default: ""
      type: "string"
    - variable: BTSYNC_DB_SECRET
      label: "Database backups key"
      description: "Resilio sync read/write key for syncing database backups"
      required: false
      default:
      type: "string"
    - variable: BTSYNC_MEDIA_SECRET
      label: "Media backups key"
      description: "Resilio sync read/write key for syncing media backups"
      required: false
      default:
      type: "string"
    - variable: GOOGLE_ANALYTIC_KEY
      label: "Google Analytic Key (Optional), we may need to use for future analytics enhancements."
      required: false
      default: ""
      type: "string"
services:
  smtp:
    scale: 1
    start_on_create: true
  web:
    scale: 1
    start_on_create: true
    health_check:
      response_timeout: 2000
      healthy_threshold: 2
      port: 80
      unhealthy_threshold: 3
      initializing_timeout: 60000
      interval: 2000
      strategy: recreate
      request_line: 'GET "/" "HTTP/1.1\r\nHost: ${SITE_URL}"'
      reinitializing_timeout: 60000
  lb:
    scale: 1
    start_on_create: true
    lb_config:
      certs: []
      port_rules:
        - hostname: ${SITE_URL}
          priority: 1
          protocol: http
          service: web
          source_port: 80
          target_port: 80
    health_check:
      healthy_threshold: 2
      response_timeout: 2000
      port: 42
      unhealthy_threshold: 3
      initializing_timeout: 60000
      interval: 2000
      strategy: recreate
      reinitializing_timeout: 60000
  uwsgi:
    scale: 1
    start_on_create: true
  rabbitmq:
    scale: 1
    start_on_create: true
  db:
    scale: 1
    start_on_create: true
  cache:
    scale: 1
    start_on_create: true
  worker:
    scale: 2
    start_on_create: true
  messaging-worker:
    scale: 1
    start_on_create: true
  dbbackups:
    scale: 1
    start_on_create: true
  mediabackup:
    scale: 1
    start_on_create: true
  dbrestore:
    scale: 1
    # We don't want to run until explicitly requested by the user
    start_on_create: false
  collectstatic:
    scale: 1
    start_on_create: true
  migrate:
    scale: 1
    start_on_create: true
  ipt:
    scale: 1
    start_on_create: true
